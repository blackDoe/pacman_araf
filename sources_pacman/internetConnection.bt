PROTO INTERNET_CONNECTION [
    exposedField SFVec2f    translation     20 320
exposedField SFTime     checkInterval   5
exposedField SFBool     internet        FALSE
exposedField SFVec2f    iconSize        25 25
exposedField MFString   imgOff          "47"
exposedField MFString   imgOn           "48"
]
{
    Transform2D {
    children [
        DEF NET_TS TimeSensor {
        loop TRUE
        cycleInterval IS checkInterval
    }
    DEF CHECK_TIMER TimeSensor {
        loop FALSE
        cycleInterval 3
        enabled TRUE
    }
    Transform2D {
        translation IS translation
        children [
            DEF SW Switch {
            whichChoice 0
            choice [
                IMAGE {
                url IS imgOff
                size IS iconSize
            }
            IMAGE {
                url IS imgOn
                size IS iconSize
            }
        ]
        }
    ]
    }
    DEF SCRIPT Script {
        field SFNode sw USE SW
        field SFNode checker USE CHECK_TIMER
        eventIn SFTime check_internet
        eventIn SFBool checkDone
        eventOut SFBool internet IS internet
        url ["javascript:
        function initialize() {
            internet = false;
            tmpInternet = false;
        }
        function check_internet() {
            xmlhttp=new XMLHttpRequest();
            xmlhttp.onreadystatechange = checkInternet;
            xmlhttp.open('GET', 'http://www.google.com', true);
            xmlhttp.send();
        }
        function checkInternet() {
            if (xmlhttp.readyState==1 && xmlhttp.status==0) {
                checker.startTime = gpac.get_scene_time();
                tmpInternet = false;
            }
            else if (xmlhttp.readyState==4 && xmlhttp.status==200) {
                internet = true;
                tmpInternet = true;
                sw.whichChoice = 1;
                checker.stopTime = gpac.get_scene_time();
            }
        }
        function checkDone(val, ts) {
            if (val) return;
            if (ts-checker.startTime < 1) return;
            if (tmpInternet == false) {
                sw.whichChoice = 0;
                internet = false;
            }
        }
        "
        ]
    }
]
}
    ROUTE NET_TS.cycleTime TO SCRIPT.check_internet
    ROUTE CHECK_TIMER.isActive TO SCRIPT.checkDone
}
