PROTO AR_VIEW [
    exposedField SFVec2f    translation     0 0
exposedField SFVec2f    layerSize       480 800
exposedField SFVec2f    rectangleSize   800 480
exposedField SFVec3f    cameraTrans     0 0 -900
exposedField MFNode     ar_objects      []
eventIn      SFVec2f    setPlayerPosition
eventIn      SFNode     addObject
eventIn      SFBool     openCamera
]
{
    Transform2D {
    translation IS translation
    children [
        OrderedGroup {
        children [
            Group {
            children [
                Layer3D {
                size IS layerSize
                navigationInfo NavigationInfo {
                    type ["NONE"]
                }
                viewpoint Viewpoint {
                    jump FALSE
                    description "AR View"
                    position 0 0 0
                    fieldOfView 0.78
                }
                children [
                    Transform {
                    rotation 0 0 1 -1.57
                    translation IS cameraTrans
                    children [
                        Shape {
                        appearance Appearance {
                            texture DEF MT MovieTexture {
                                url [""]
                            }
                            material Material2D {
                                lineProps LineProperties {
                                    width 0
                                }
                            }
                        }
                        geometry Rectangle {
                            size IS rectangleSize
                        }
                    }
                ]
                }
                DEF AR_TRANSFORM Transform {
                #
                # Tablet: rotation 0 0 1 3.14 # AR View displayed correct only while holding the tablet horizontally
                                        # Phone: rotation 0 0 1 -1.57 # AR View works no matter how the phone device is hold
                                        #
                                        rotation 0 0 1 -1.57
                    children [
                        DEF OBJ_CONTAINER Transform {
                        children IS ar_objects
                    }

                ]
                }
            ]
            }
        ]
        }
    ]
    }
]
}
    DEF SCRIPT Script {
    eventIn SFVec3f     updateOrientation
    eventIn SFVec2f     updatePlayerPos IS setPlayerPosition
    eventIn SFNode      addARObject     IS addObject
    eventIn SFBool      openCamera      IS openCamera
    field   SFNode      movieTexture    USE MT
    field   SFNode      objects         USE OBJ_CONTAINER
    field   SFNode      arTransform     USE AR_TRANSFORM

    url ["javascript:
    function initialize() {
        prevOrientation = new SFVec3f (0,0,0);
        deviceOrientationPortrait = gpac.get_option('General', 'DeviceOrientationPortrait');
        if (deviceOrientationPortrait == 1) {
            arTransform.rotation = new SFRotation (0, 0, 1, -1.57);
        }
        else {
            arTransform.rotation = new SFRotation (0, 0, 1, 3.14);
        }
    }

    function openCamera(val) {
        if (val) {
            if (movieTexture.url[0] == '') {
                movieTexture.url[0] = 'hw://camera';
            }
        }
    }

    function addARObject(arObjNode) {
        if (arObjNode == null) return;
        print ('[ AR VIEW ]: Add new AR Object instance to the AR View: ' + arObjNode.name);
        objects.addChildren = new MFNode(arObjNode);
    }

    function updatePlayerPos(pos) {
        if (pos.x == 0 && pos.y == 0) return;
        print ('[ AR VIEW ]: UPDATE PLAYER POSITION: ' + pos);
        for ( i = 0; i < objects.children.length; i++ ) {
            objects.children[i].playerPosition = new SFVec2f (pos.x, pos.y);
        }
    }

    function updateOrientation(rot)
    {
        if ( objects.children.length == 0 ) { return;}
        if ((Math.abs(prevOrientation.x - rot.x) < 5) && (Math.abs(prevOrientation.y - rot.y) < 5) && (Math.abs(prevOrientation.z - rot.z) < 5)) return;

        prevOrientation.x = rot.x;
        prevOrientation.y = rot.y;
        prevOrientation.z = rot.z;

        Azimuth = rot.x;
        Pitch   = rot.y;
        Roll    = rot.z;
        conv    = 3.14/180/2;
        c1      = Math.cos(Azimuth  * conv);
        s1      = Math.sin(Azimuth  * conv);
        c2      = Math.cos(Pitch    * conv);
        s2      = Math.sin(Pitch    * conv);
        c3      = Math.cos(Roll     * conv);
        s3      = Math.sin(Roll     * conv);

        c1c2    = c1*c2;
        s1s2    = s1*s2;

        w       = c1c2*c3 - s1s2*s3;
        x       = c1c2*s3 + s1s2*c3;
        y       = s1*c2*c3 + c1*s2*s3;
        z       = c1*s2*c3 - s1*c2*s3;

        angle   = 2 * Math.acos(w);
        norm    = x*x + y*y + z*z;

        if ( norm < 0.001 ) {
            x = 1;
            y = z = 0;
        }
        else {
            norm = Math.sqrt(norm);
            x /= norm;
            y /= norm;
            z /= norm;
        }
        objects.rotation = new SFRotation( x, z, y, angle );
    }
    "
    ]
}
    DEF ORIENT_SENS InputSensor {
    url "4"
    buffer {
        REPLACE SCRIPT.updateOrientation BY 0 0 0
    }
}
}

